name : DevSecOps pipeline

on : 
  push:

env:
  BUILD_ARTIFACT_NAME: build-artifacts

jobs :
  # 1) checkout, build, run unit tests, upload build artifacts
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      artifact_uploaded: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Run unit tests (Maven)
        working-directory: backend
        run: |
          chmod +x mvnw
          ./mvnw -B test

      - name: Package backend (skip tests)
        working-directory: backend
        run: |
          ./mvnw -B -DskipTests package

      - name: Collect build artifacts
        run: |
          mkdir -p ./ci_artifacts/backend
          cp ${GITHUB_WORKSPACE}/backend/target/*.jar ./ci_artifacts/backend/ || true
          # include any other files you want preserved (e.g. config, compiled resources)
          ls -la ./ci_artifacts || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ./ci_artifacts

  # # 2) SCA scan with Snyk (checkout build artifacts, run Snyk against pom.xml then upload results)
  # sca-snyk:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.BUILD_ARTIFACT_NAME }}

  #     - name: Make mvnw executable (important)
  #       run: chmod +x ./backend/mvnw

  #     - name: Setup Node (for Snyk CLI)
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'

  #     - name: Install Snyk CLI
  #       run: npm install -g snyk

  #     - name: Authenticate Snyk
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       run: |
  #         snyk auth $SNYK_TOKEN || true

  #     - name: Run Snyk SCA (backend - Maven)
  #       working-directory: backend
  #       run: |
  #         # run Snyk test on the backend pom (output json to file)
  #         snyk test --file=pom.xml --json > "${{ github.workspace }}/snyk-backend-result.json" || true

  #         # verify the report
  #         ls -la "${{ github.workspace }}/snyk-backend-result.json"

  #     - name: Upload Snyk results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: snyk-results
  #         path: snyk-backend-result.json

  # 3) SAST scan with CodeQL (checkout, download artifacts, build, run CodeQL analyze)
  sast-codeql:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      # - name: Build (for CodeQL to see compiled classes)
      #   working-directory: backend
      #   run: |
      #     chmod +x mvnw
      #     ./mvnw -B -DskipTests package

      - name: Locate CodeQL CLI and verify
        id: find_codeql
        run: |
          # try to find the codeql binary installed by the init action
          CODEQL_BIN=$(find /opt/hostedtoolcache/CodeQL -type f -name codeql -print -quit || true)
          if [ -z "$CODEQL_BIN" ]; then
            echo "ERROR: codeql binary not found under /opt/hostedtoolcache/CodeQL"
            echo "PATH: $PATH"
            exit 1
          fi
          echo "codeql=$CODEQL_BIN" >> $GITHUB_OUTPUT
          $CODEQL_BIN version

      - name: Create CodeQL database (use detected CLI)
        run: |
          CODEQL="${{ steps.find_codeql.outputs.codeql }}"
          # create a db by running the mvn package command under backend
          pushd backend
          chmod +x mvnw
          # the command below will be logged; it is recorded by CodeQL extractor
          $CODEQL database create "$PWD/../codeql-db" --language=java --command="./mvnw clean compile -DskipTests"
          popd

      - name: Analyze DB -> SARIF (use detected CLI)
        run: |
          CODEQL="${{ steps.find_codeql.outputs.codeql }}"
          $CODEQL database analyze "$GITHUB_WORKSPACE/../codeql-db" --format=sarif-latest --output="${{ github.workspace }}/codeql-results.sarif" --threads=2


      - name: Upload CodeQL SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif
          path: codeql-results.sarif