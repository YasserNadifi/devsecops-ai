pipeline {
  agent any
  environment {
    DOCKERHUB_CREDENTIALS = 'dockerhub-creds'  
    BACKEND_IMAGE         = 'yasser2003/waterwise-backend'
    FRONTEND_IMAGE        = 'yasser2003/waterwise-frontend'
  }
  stages {

    stage('Tests') {
      steps {
        dir('WaterWise_app') {
          script {
            docker.image('maven:3.9.4-eclipse-temurin-21').inside('--user root') {
              sh '''
                rm -rf target
                mvn test \
                  -Dspring.datasource.url=jdbc:mysql://host.docker.internal:3306/water_wise \
                  -Dspring.datasource.username=root \
                  -Dspring.datasource.password=password0664938616
              '''
            }
          }
        }
      }
    }


    stage('Docker Login') {
      steps {
        withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push') {
      steps {
        dir('WaterWise_app') {
          // 1) build both services
          sh 'docker compose build --pull'

          // 2) push them up by service name
          sh 'docker compose push backend'
          sh 'docker compose push frontend'
        }
      }
    }
    
    stage('Cleanup') {
      steps {
        sh 'docker logout'
        sh 'docker rmi yourdockerhubuser/waterwise-backend:latest yourdockerhubuser/waterwise-frontend:latest || true'
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
          dir('WaterWise_app/k8s') {
            sh '''
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x ./kubectl
              mv ./kubectl /usr/local/bin/kubectl
              kubectl version
              kubectl get namespaces


              kubectl delete -f frontend-deployment.yml --ignore-not-found
              kubectl delete -f backend-deployment.yml --ignore-not-found
              
            
              kubectl apply -f namespace.yml
              kubectl apply -f mysql-deployment.yml
              kubectl apply -f backend-deployment.yml
              kubectl apply -f frontend-deployment.yml
              

            '''
          
        }
      }
    }

  }

  post {
    always {
      echo 'Pipeline finished.'
    }
    failure {
      echo 'One or more stages failed.'
    }
  }
}
